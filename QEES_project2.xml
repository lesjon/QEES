<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.
////////////////////////////////////////////////
const int END = 25200;

const int Sunstarts[5] = {4305, 9809, 15313, 20817, END};
const int Sundurations[5] = {3504, 3506, 3509, 3512, END};

const int UHFjobstarts[5] = {3687, 9387, 15107, 20917, END};
const int UHFjobdurations[5] = {580, 580, 517, 213, END};

const int X1jobstarts[2] = {2573, END};
const int X1jobdurations[2] = {576, END};
const int X2jobstarts[5] = {3554, 9337, 15084, 20815, END};
const int X2jobdurations[5] = {579, 554, 592, 586, END};

const int L1jobstarts[6] = {1113, 6949, 12976, 19059, 24969, END};
const int L1jobdurations[6] = {5570, 5570, 5570, 5570, 5570, END};
const int L2jobstarts[5] = {4311, 10365, 16417, 22295, END};
const int L2jobdurations[5] = {5570, 5570, 5570, 5570, END};

////////////////////////////////////////////////
const int slew_time = 10 * 60;
const int preheat_time = 20 * 60;

chan Xinit, Linit;
chan Xdone, Ldone;
chan battery;

broadcast chan UHFinit, UHFdone;

clock global_time;


int X1jobsdone = 0;
int X1jobsskip = 0;
int UHFjobsdone = 0;
int UHFjobsskip = 0;
int L1jobsdone = 0;
int L1jobsskip = 0;
int passed_solations = 0;

int new_time = 0;
int old_time = 0;

int[0, 200000000] SoC = 119808000;//0.8 * 149760000

void FinishedJob(int job_consumption, int time){
	SoC -= job_consumption * time;
}

bool LBand = false;
void updateLBand(bool new){
	LBand = new;
}
int[0, 149760000] last_backgound_drain = 0;
void FinishedInsolation(){
	if(LBand){
		SoC += Sundurations[passed_solations-1] * 6100;
	}else{
		SoC += Sundurations[passed_solations-1] * 5700;
	}
	last_backgound_drain = (Sunstarts[passed_solations] + Sundurations[passed_solations]) * 2989 - last_backgound_drain;
	SoC -= last_backgound_drain;
}

</declaration><template><name>Attitude</name><declaration>clock t;

void BatteryPreheated(){
	SoC -= preheat_time * 414;
}

void BatterySlewed(){
	SoC -= slew_time * 414;
}</declaration><location id="id0" x="-360" y="-160"><committed/></location><location id="id1" x="-344" y="72"><committed/></location><location id="id2" x="-640" y="72"><committed/></location><location id="id3" x="-208" y="8"><committed/></location><location id="id4" x="-208" y="72"><name x="-184" y="64">Lattitude</name></location><location id="id5" x="-208" y="-48"><name x="-184" y="-56">DefaultSlew</name><label kind="invariant" x="-184" y="-40">t &lt;= slew_time</label></location><location id="id6" x="-504" y="72"><name x="-520" y="80">Lslew</name><label kind="invariant" x="-520" y="96">t &lt;= 10</label></location><location id="id7" x="-776" y="72"><name x="-800" y="88">preheat</name><label kind="invariant" x="-800" y="104">t &lt;= preheat_time</label></location><location id="id8" x="-208" y="-160"><name x="-184" y="-176">Xattitude</name></location><location id="id9" x="-504" y="-160"><name x="-520" y="-208">Xslew</name><label kind="invariant" x="-520" y="-192">t &lt;= slew_time</label></location><location id="id10" x="-776" y="-48"><name x="-872" y="-80">DefaultAttitude</name></location><init ref="id10"/><transition><source ref="id9"/><target ref="id0"/><label kind="guard" x="-464" y="-176">t &gt;= slew_time</label><label kind="assignment" x="-492" y="-160">BatterySlewed()</label></transition><transition><source ref="id0"/><target ref="id8"/><label kind="synchronisation" x="-344" y="-175">battery!</label></transition><transition><source ref="id1"/><target ref="id4"/><label kind="synchronisation" x="-328" y="56">battery!</label><label kind="assignment" x="-328" y="40">BatterySlewed()</label></transition><transition><source ref="id6"/><target ref="id1"/><label kind="guard" x="-480" y="32">t &gt;= 10</label><label kind="assignment" x="-480" y="52">updateLBand(true)</label></transition><transition><source ref="id2"/><target ref="id6"/><label kind="synchronisation" x="-624" y="48">battery!</label><label kind="assignment" x="-616" y="72">t = 0</label></transition><transition><source ref="id7"/><target ref="id2"/><label kind="guard" x="-760" y="40">t &gt;= preheat_time</label><label kind="assignment" x="-760" y="56">BatteryPreheated()</label></transition><transition><source ref="id4"/><target ref="id3"/><label kind="synchronisation" x="-192" y="29">Ldone?</label><label kind="assignment" x="-192" y="40">updateLBand(false)</label></transition><transition><source ref="id3"/><target ref="id5"/><label kind="synchronisation" x="-268" y="-35">battery!</label><label kind="assignment" x="-200" y="-24">t = 0</label></transition><transition><source ref="id5"/><target ref="id10"/><label kind="guard" x="-552" y="-72">t &gt;= slew_time</label></transition><transition><source ref="id10"/><target ref="id7"/><label kind="synchronisation" x="-816" y="-16">Linit?</label><label kind="assignment" x="-816" y="0">t = 0</label><nail x="-776" y="-8"/></transition><transition><source ref="id8"/><target ref="id5"/><label kind="synchronisation" x="-200" y="-120">Xdone?</label><label kind="assignment" x="-200" y="-104">t = 0</label></transition><transition><source ref="id10"/><target ref="id9"/><label kind="synchronisation" x="-760" y="-152">Xinit?</label><label kind="assignment" x="-760" y="-136">t = 0</label><nail x="-776" y="-160"/></transition></template><template><name>X1Scheduler</name><declaration>
int checkForMissedJob(){
	return X1jobstarts[X1jobsdone + X1jobsskip] - slew_time;
}

int nextXJobStartTime(){
	if(0 &gt; X1jobstarts[X1jobsdone + X1jobsskip] - slew_time){
		return END;
	}
	return X1jobstarts[X1jobsdone + X1jobsskip] - slew_time;
}

int nextXJobEndTime(){
	return X2jobstarts[X1jobsdone + X1jobsskip] + X1jobdurations[X1jobsdone + X1jobsskip];
}

void BatteryX1(){
	SoC -= X1jobdurations[X1jobsdone + X1jobsskip] * 11945;
}</declaration><location id="id11" x="-240" y="48"><committed/></location><location id="id12" x="-360" y="48"><urgent/></location><location id="id13" x="-240" y="-32"><name x="-224" y="-80">working</name><label kind="invariant" x="-224" y="-64">global_time &lt;= 
nextXJobEndTime()</label></location><location id="id14" x="-480" y="-32"><name x="-520" y="-40">idle</name><label kind="invariant" x="-632" y="-24">global_time &lt;=
nextXJobStartTime()
&amp;&amp; cost'==4</label></location><init ref="id12"/><transition><source ref="id11"/><target ref="id12"/><label kind="synchronisation" x="-360" y="33">battery!</label><label kind="assignment" x="-344" y="48">++X1jobsdone</label></transition><transition><source ref="id13"/><target ref="id11"/><label kind="guard" x="-232" y="-16">global_time &gt;= nextXJobEndTime()</label><label kind="synchronisation" x="-232" y="-1">Xdone!</label><label kind="assignment" x="-232" y="14">BatteryX1()</label></transition><transition><source ref="id12"/><target ref="id14"/><label kind="guard" x="-456" y="-16">global_time &lt;=
checkForMissedJob()</label></transition><transition><source ref="id12"/><target ref="id14"/><label kind="guard" x="-488" y="48">global_time &gt;
checkForMissedJob()</label><label kind="assignment" x="-488" y="80">X1jobsskip++</label><nail x="-480" y="48"/></transition><transition><source ref="id14"/><target ref="id14"/><label kind="guard" x="-472" y="-136">global_time &gt;= nextXJobStartTime()</label><label kind="assignment" x="-472" y="-120">X1jobsskip++</label><nail x="-480" y="-104"/><nail x="-392" y="-104"/></transition><transition><source ref="id14"/><target ref="id13"/><label kind="guard" x="-400" y="-80">global_time &gt;=
 nextXJobStartTime()</label><label kind="synchronisation" x="-400" y="-48">Xinit!</label></transition></template><template><name>UHFScheduler</name><declaration>
int nextUHFJobStartTime(){
	return UHFjobstarts[UHFjobsdone + UHFjobsskip];
}

int nextUHFJobEndTime(){
	return UHFjobstarts[UHFjobsdone + UHFjobsskip] + UHFjobdurations[UHFjobsdone + UHFjobsskip];
}


void BatteryUHF(){
	SoC -= UHFjobdurations[UHFjobsdone + UHFjobsskip] * 2630;
}</declaration><location id="id15" x="-328" y="120"><committed/></location><location id="id16" x="-208" y="-8"><name x="-184" y="-8">transmission</name><label kind="invariant" x="-184" y="8">global_time &lt;=
 nextUHFJobEndTime()</label></location><location id="id17" x="-456" y="-8"><name x="-496" y="-8">idle</name><label kind="invariant" x="-560" y="8">global_time &lt;= nextUHFJobStartTime()
&amp;&amp; cost'==1</label></location><init ref="id17"/><transition><source ref="id15"/><target ref="id17"/><label kind="synchronisation" x="-452" y="41">battery!</label><label kind="assignment" x="-452" y="56">UHFjobsdone++</label><nail x="-456" y="120"/></transition><transition><source ref="id16"/><target ref="id15"/><label kind="guard" x="-304" y="64">global_time == nextUHFJobEndTime()</label><label kind="synchronisation" x="-304" y="79">UHFdone!</label><label kind="assignment" x="-328" y="56">BatteryUHF()</label><nail x="-208" y="120"/></transition><transition><source ref="id17"/><target ref="id16"/><label kind="guard" x="-432" y="-48">global_time == nextUHFJobStartTime()</label><label kind="synchronisation" x="-432" y="-32">UHFinit!</label></transition></template><template><name>L1Scheduler</name><declaration>
int checkForMissedJob(){
	return L1jobstarts[L1jobsdone + L1jobsskip/* + L1jobsActive*/] - slew_time - preheat_time;
}

int nextLJobStartTime(){
	return L1jobstarts[L1jobsdone + L1jobsskip/*  + L1jobsActive*/] - slew_time - preheat_time;
}

int nextLJobEndTime(){
	return L1jobstarts[L1jobsdone + L1jobsskip] + L1jobdurations[L1jobsdone + L1jobsskip];
}

void BatteryL1(){
	SoC -= L1jobdurations[L1jobsdone + L1jobsskip] * 3863;
}</declaration><location id="id18" x="-56" y="104"><committed/></location><location id="id19" x="-192" y="104"><urgent/></location><location id="id20" x="-56" y="0"><name x="-40" y="-40">active</name><label kind="invariant" x="-40" y="-24">global_time 
&lt;= nextLJobEndTime()</label></location><location id="id21" x="-312" y="0"><name x="-352" y="-8">idle</name><label kind="invariant" x="-360" y="24">global_time &lt;= 
nextLJobStartTime()
&amp;&amp; cost'==1</label></location><init ref="id19"/><transition><source ref="id18"/><target ref="id19"/><label kind="synchronisation" x="-160" y="80">battery!</label><label kind="assignment" x="-168" y="104">L1jobsdone++</label></transition><transition><source ref="id20"/><target ref="id18"/><label kind="guard" x="-48" y="16">global_time &gt;=
nextLJobEndTime()</label><label kind="synchronisation" x="-48" y="48">Ldone!</label><label kind="assignment" x="-48" y="64">BatteryL1()</label></transition><transition><source ref="id19"/><target ref="id21"/><label kind="guard" x="-312" y="22">global_time &lt;= checkForMissedJob()</label></transition><transition><source ref="id19"/><target ref="id21"/><label kind="guard" x="-432" y="112">global_time &gt; checkForMissedJob()</label><label kind="assignment" x="-336" y="136">L1jobsskip++</label><nail x="-312" y="104"/></transition><transition><source ref="id21"/><target ref="id20"/><label kind="guard" x="-280" y="-32">global_time &gt;= nextLJobStartTime()</label><label kind="synchronisation" x="-280" y="-48">Linit!</label></transition><transition><source ref="id21"/><target ref="id21"/><label kind="guard" x="-312" y="-112">global_time &gt;= nextLJobStartTime()</label><label kind="assignment" x="-312" y="-96">L1jobsskip++</label><nail x="-152" y="-80"/><nail x="-312" y="-80"/></transition></template><template><name>Insolation</name><declaration>int nextInsolationStartTime(){
	return Sunstarts[passed_solations];
}

int nextInsolationEndTime(){
	return Sunstarts[passed_solations] + Sundurations[passed_solations];
}</declaration><location id="id22" x="-520" y="168"><committed/></location><location id="id23" x="-376" y="24"><name x="-400" y="-8">Eclipse</name><label kind="invariant" x="-432" y="40">global_time &lt;= 
nextInsolationEndTime()</label></location><location id="id24" x="-648" y="24"><name x="-688" y="0">Sun</name><label kind="invariant" x="-760" y="32">global_time &lt;=
 nextInsolationStartTime()</label></location><init ref="id24"/><transition><source ref="id23"/><target ref="id22"/><label kind="guard" x="-504" y="112">global_time &gt;= 
nextInsolationEndTime()</label><label kind="assignment" x="-504" y="142">FinishedInsolation()</label><nail x="-376" y="168"/></transition><transition><source ref="id22"/><target ref="id24"/><label kind="synchronisation" x="-644" y="81">battery!</label><label kind="assignment" x="-644" y="96">passed_solations++</label><nail x="-648" y="168"/></transition><transition><source ref="id24"/><target ref="id23"/><label kind="guard" x="-608" y="-16">global_time &gt;= 
nextInsolationStartTime()</label></transition></template><template><name>Ender</name><declaration>int stop_time = END - (preheat_time + slew_time + 1);</declaration><location id="id25" x="-352" y="-72"><name x="-362" y="-102">go_to_deadlock</name><committed/></location><location id="id26" x="-592" y="-72"><name x="-602" y="-102">active</name><label kind="invariant" x="-602" y="-57">global_time &lt;= stop_time</label></location><init ref="id26"/><transition><source ref="id26"/><target ref="id25"/><label kind="guard" x="-552" y="-88">global_time &gt;= stop_time</label></transition></template><template><name>Battery</name><declaration>
int[0, 149760000] LowerBound = 74880000; //0.5 8 149760000
int[0, 149760000] percentage = 80;
void updatePercentage(){
	percentage = SoC / 149760000;
}</declaration><location id="id27" x="-64" y="-128"><name x="-74" y="-158">Depletion</name><committed/></location><location id="id28" x="-64" y="-64"><name x="-64" y="-96">check</name><committed/></location><location id="id29" x="-240" y="-64"><name x="-232" y="-88">Idle</name></location><location id="id30" x="-240" y="-128"><name x="-250" y="-158">Init</name><committed/></location><init ref="id30"/><transition><source ref="id28"/><target ref="id27"/><label kind="guard" x="-56" y="-112">SoC &lt; LowerBound</label></transition><transition><source ref="id28"/><target ref="id29"/><label kind="guard" x="-208" y="24">SoC &gt; LowerBound</label><nail x="-64" y="24"/><nail x="-240" y="24"/></transition><transition><source ref="id29"/><target ref="id28"/><label kind="synchronisation" x="-208" y="-64">battery?</label><label kind="assignment" x="-208" y="-48">updatePercentage()</label></transition><transition><source ref="id30"/><target ref="id29"/></transition></template><template><name>X2Scheduler</name><declaration>
int X2jobsdone = 0;
int X2jobsskip = 0;


int checkForMissedJob(){
	return X2jobstarts[X2jobsdone + X2jobsskip] - slew_time;
}

int nextXJobStartTime(){
	return X2jobstarts[X2jobsdone + X2jobsskip] - slew_time;
}

int nextXJobEndTime(){
	return X2jobstarts[X2jobsdone + X2jobsskip] + X2jobdurations[X2jobsdone + X2jobsskip];
}

void BatteryX2(){
	SoC -= X2jobdurations[X2jobsdone + X2jobsskip] * 11945;
}</declaration><location id="id31" x="-440" y="64"><committed/></location><location id="id32" x="-560" y="64"><urgent/></location><location id="id33" x="-440" y="-40"><name x="-440" y="-104">working</name><label kind="invariant" x="-448" y="-88">global_time &lt;=
nextXJobEndTime()</label></location><location id="id34" x="-728" y="-40"><name x="-768" y="-56">idle</name><label kind="invariant" x="-840" y="-32">global_time &lt;=
nextXJobStartTime()
&amp;&amp; cost'==4</label></location><init ref="id32"/><transition><source ref="id31"/><target ref="id32"/><label kind="synchronisation" x="-536" y="40">battery!</label><label kind="assignment" x="-544" y="64">++X2jobsdone</label></transition><transition><source ref="id33"/><target ref="id31"/><label kind="guard" x="-432" y="-8">global_time &gt;=
nextXJobEndTime()</label><label kind="synchronisation" x="-432" y="-24">Xdone!</label><label kind="assignment" x="-432" y="24">BatteryX2()</label></transition><transition><source ref="id32"/><target ref="id34"/><label kind="guard" x="-704" y="-18">global_time &lt;=
checkForMissedJob()</label></transition><transition><source ref="id32"/><target ref="id34"/><label kind="guard" x="-728" y="70">global_time &gt;
checkForMissedJob()</label><label kind="assignment" x="-728" y="100">X2jobsskip++</label><nail x="-728" y="64"/></transition><transition><source ref="id34"/><target ref="id34"/><label kind="guard" x="-728" y="-128">global_time &gt;=nextXJobStartTime()</label><label kind="assignment" x="-728" y="-112">X2jobsskip++</label><nail x="-728" y="-96"/><nail x="-528" y="-96"/></transition><transition><source ref="id34"/><target ref="id33"/><label kind="guard" x="-696" y="-70">global_time &gt;=nextXJobStartTime()</label><label kind="synchronisation" x="-696" y="-55">Xinit!</label></transition></template><template><name>L2Scheduler</name><declaration>
int L2jobsdone = 0;
/*int L2jobsActive = 0;*/
int L2jobsskip = 0;


int checkForMissedJob(){
	return L2jobstarts[L2jobsdone + L2jobsskip/* + L2jobsActive*/] - slew_time - preheat_time;
}

int nextLJobStartTime(){
	return L2jobstarts[L2jobsdone + L2jobsskip/*  + L2jobsActive*/] - slew_time - preheat_time;
}

int nextLJobEndTime(){
	return L2jobstarts[L2jobsdone + L2jobsskip] + L2jobdurations[L2jobsdone + L2jobsskip];
}


void BatteryL2(){
	SoC -= L2jobdurations[L2jobsdone + L2jobsskip] * 3863;
}</declaration><location id="id35" x="96" y="128"><committed/></location><location id="id36" x="-80" y="128"><urgent/></location><location id="id37" x="96" y="8"><name x="88" y="-32">active</name><label kind="invariant" x="112" y="-16">global_time &lt;= 
nextLJobEndTime()</label></location><location id="id38" x="-232" y="8"><name x="-272" y="-16">idle</name><label kind="invariant" x="-336" y="16">global_time &lt;=
 nextLJobStartTime()
&amp;&amp; cost'==1</label></location><init ref="id36"/><transition><source ref="id35"/><target ref="id36"/><label kind="synchronisation" x="-40" y="128">battery!</label><label kind="assignment" x="-40" y="144">L2jobsdone++</label></transition><transition><source ref="id37"/><target ref="id35"/><label kind="guard" x="120" y="40">global_time &gt;=
nextLJobEndTime()</label><label kind="synchronisation" x="120" y="72">Ldone!</label><label kind="assignment" x="120" y="87">BatteryL2()</label></transition><transition><source ref="id36"/><target ref="id38"/><label kind="guard" x="-200" y="48">global_time &lt;= 
checkForMissedJob()</label></transition><transition><source ref="id36"/><target ref="id38"/><label kind="guard" x="-232" y="128">global_time &gt;
checkForMissedJob()</label><label kind="assignment" x="-232" y="160">L2jobsskip++</label><nail x="-232" y="128"/></transition><transition><source ref="id38"/><target ref="id37"/><label kind="guard" x="-152" y="-24">global_time &gt;= nextLJobStartTime()</label><label kind="synchronisation" x="-152" y="-8">Linit!</label></transition><transition><source ref="id38"/><target ref="id38"/><label kind="guard" x="-232" y="-96">global_time &gt;= nextLJobStartTime()</label><label kind="assignment" x="-232" y="-80">L2jobsskip++</label><nail x="-136" y="-56"/><nail x="-232" y="-56"/></transition></template><system>// Place template instantiations here.
Att = Attitude();
X1S = X1Scheduler();
X2S = X2Scheduler();
L1S = L1Scheduler();
L2S = L2Scheduler();
UHFS = UHFScheduler();
BAT = Battery();
SUN = Insolation();
ENDER = Ender();

// List one or more processes to be composed into a system.
system Att, X1S, X2S, L1S, L2S, UHFS, BAT, SUN, ENDER;</system></nta>