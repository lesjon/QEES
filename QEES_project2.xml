<?xml version="1.0" encoding="utf-8"?><!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_1.dtd'><nta><declaration>// Place global declarations here.
chan Xinit, Linit;
chan Xdone, Ldone;
chan battery;

broadcast chan UHFinit, UHFdone;

clock global_time;


int X1jobsdone = 0;
int X1jobsskip = 0;
int UHFjobsdone = 0;
int UHFjobsskip = 0;
int L1jobsdone = 0;
int L1jobsskip = 0;




const int slew_time = 10 * 60;
const int preheat_time = 20 * 60;
////////////////////////////////////////////////
const int END = 25200;

const int Sunstarts[5] = {4305, 9809, 15313, 20817, END};
const int Sundurations[5] = {3504, 3506, 3509, 3512, END};

const int UHFjobstarts[5] = {3687, 9387, 15107, 20917, END};
const int UHFjobdurations[5] = {580, 580, 517, 213, END};

const int X1jobstarts[2] = {2573, END};
const int X1jobdurations[2] = {576, END};
const int X2jobstarts[5] = {3554, 9337, 15084, 20815, END};
const int X2jobdurations[5] = {579, 554, 592, 586, END};

const int L1jobstarts[6] = {1113, 6949, 12976, 19059, 24969, END};
const int L1jobdurations[6] = {5570, 5570, 5570, 5570, 5570, END};
const int L2jobstarts[5] = {4311, 10365, 16417, 22295, END};
const int L2jobdurations[5] = {5570, 5570, 5570, 5570, END};

////////////////////////////////////////////////

int passed_solations = 0;

int l = 100;
int lr = 0;
int lb = 0;

void BatteryUpdate(int ratechange){
	lr += ratechange;
}</declaration><template><name>Attitude</name><declaration>clock t;</declaration><location id="id0" x="-208" y="72"><name x="-184" y="64">Lattitude</name></location><location id="id1" x="-208" y="-48"><name x="-184" y="-56">DefaultSlew</name><label kind="invariant" x="-184" y="-40">t &lt;= slew_time</label></location><location id="id2" x="-368" y="72"><name x="-384" y="80">Lslew</name><label kind="invariant" x="-384" y="96">t &lt;= 10</label></location><location id="id3" x="-528" y="72"><name x="-552" y="88">preheat</name><label kind="invariant" x="-552" y="104">t &lt;= preheat_time</label></location><location id="id4" x="-208" y="-160"><name x="-184" y="-176">Xattitude</name></location><location id="id5" x="-368" y="-160"><name x="-384" y="-208">Xslew</name><label kind="invariant" x="-384" y="-192">t &lt;= slew_time</label></location><location id="id6" x="-528" y="-48"><name x="-624" y="-80">DefaultAttitude</name></location><init ref="id6"/><transition><source ref="id1"/><target ref="id6"/><label kind="guard" x="-416" y="-72">t &gt;= slew_time</label></transition><transition><source ref="id0"/><target ref="id1"/><label kind="synchronisation" x="-200" y="0">Ldone?</label><label kind="assignment" x="-200" y="16">t = 0</label></transition><transition><source ref="id2"/><target ref="id0"/><label kind="guard" x="-328" y="56">t &gt;= 10</label></transition><transition><source ref="id3"/><target ref="id2"/><label kind="guard" x="-496" y="48">t &gt;= preheat_time</label><label kind="assignment" x="-496" y="32">t = 0</label></transition><transition><source ref="id6"/><target ref="id3"/><label kind="synchronisation" x="-568" y="-16">Linit?</label><label kind="assignment" x="-568" y="0">t = 0</label><nail x="-528" y="-8"/></transition><transition><source ref="id4"/><target ref="id1"/><label kind="synchronisation" x="-200" y="-120">Xdone?</label><label kind="assignment" x="-200" y="-104">t = 0</label></transition><transition><source ref="id5"/><target ref="id4"/><label kind="guard" x="-336" y="-160">t &gt;= slew_time</label></transition><transition><source ref="id6"/><target ref="id5"/><label kind="synchronisation" x="-512" y="-152">Xinit?</label><label kind="assignment" x="-512" y="-136">t = 0</label><nail x="-528" y="-160"/></transition></template><template><name>X1Scheduler</name><declaration>
int checkForMissedJob(){
	return X1jobstarts[X1jobsdone + X1jobsskip] - slew_time;
}

int nextXJobStartTime(){
	if(0 &gt; X1jobstarts[X1jobsdone + X1jobsskip] - slew_time){
		return END;
	}
	return X1jobstarts[X1jobsdone + X1jobsskip] - slew_time;
}

int nextXJobEndTime(){
	return X2jobstarts[X1jobsdone + X1jobsskip] + X1jobdurations[X1jobsdone + X1jobsskip];
}

</declaration><location id="id7" x="-360" y="48"><urgent/></location><location id="id8" x="-240" y="-32"><name x="-224" y="-40">working</name><label kind="invariant" x="-240" y="-16">global_time &lt;= 
nextXJobEndTime()</label></location><location id="id9" x="-480" y="-32"><name x="-520" y="-40">idle</name><label kind="invariant" x="-632" y="-24">global_time &lt;=
nextXJobStartTime()
&amp;&amp; cost'==4</label></location><init ref="id7"/><transition><source ref="id7"/><target ref="id9"/><label kind="guard" x="-456" y="-16">global_time &lt;=
checkForMissedJob()</label></transition><transition><source ref="id7"/><target ref="id9"/><label kind="guard" x="-488" y="48">global_time &gt;
checkForMissedJob()</label><label kind="assignment" x="-488" y="80">X1jobsskip++</label><nail x="-480" y="48"/></transition><transition><source ref="id8"/><target ref="id7"/><label kind="guard" x="-336" y="48">global_time &gt;= nextXJobEndTime()</label><label kind="synchronisation" x="-336" y="64">Xdone!</label><label kind="assignment" x="-336" y="80">++X1jobsdone</label><nail x="-240" y="48"/></transition><transition><source ref="id9"/><target ref="id9"/><label kind="guard" x="-472" y="-136">global_time &gt;= nextXJobStartTime()</label><label kind="assignment" x="-472" y="-120">X1jobsskip++</label><nail x="-480" y="-104"/><nail x="-392" y="-104"/></transition><transition><source ref="id9"/><target ref="id8"/><label kind="guard" x="-400" y="-80">global_time &gt;=
 nextXJobStartTime()</label><label kind="synchronisation" x="-400" y="-48">Xinit!</label></transition></template><template><name>UHFScheduler</name><declaration>
int nextUHFJobStartTime(){
	return UHFjobstarts[UHFjobsdone + UHFjobsskip];
}

int nextUHFJobEndTime(){
	return UHFjobstarts[UHFjobsdone + UHFjobsskip] + UHFjobdurations[UHFjobsdone + UHFjobsskip];
}</declaration><location id="id10" x="-208" y="-8"><name x="-184" y="-8">transmission</name><label kind="invariant" x="-184" y="8">global_time &lt;=
 nextUHFJobEndTime()</label></location><location id="id11" x="-456" y="-8"><name x="-496" y="-8">idle</name><label kind="invariant" x="-560" y="8">global_time &lt;= nextUHFJobStartTime()
&amp;&amp; cost'==1</label></location><init ref="id11"/><transition><source ref="id10"/><target ref="id11"/><label kind="guard" x="-408" y="80">global_time == nextUHFJobEndTime()</label><label kind="synchronisation" x="-408" y="96">UHFdone!</label><label kind="assignment" x="-408" y="112">UHFjobsdone++</label><nail x="-208" y="80"/><nail x="-456" y="80"/></transition><transition><source ref="id11"/><target ref="id10"/><label kind="guard" x="-432" y="-48">global_time == nextUHFJobStartTime()</label><label kind="synchronisation" x="-432" y="-32">UHFinit!</label></transition></template><template><name>L1Scheduler</name><declaration>
int checkForMissedJob(){
	return L1jobstarts[L1jobsdone + L1jobsskip/* + L1jobsActive*/] - slew_time - preheat_time;
}

int nextLJobStartTime(){
	return L1jobstarts[L1jobsdone + L1jobsskip/*  + L1jobsActive*/] - slew_time - preheat_time;
}

int nextLJobEndTime(){
	return L1jobstarts[L1jobsdone + L1jobsskip] + L1jobdurations[L1jobsdone + L1jobsskip];
}</declaration><location id="id12" x="-192" y="104"><urgent/></location><location id="id13" x="-56" y="0"><name x="-40" y="-16">active</name><label kind="invariant" x="-40" y="0">global_time 
&lt;= nextLJobEndTime()</label></location><location id="id14" x="-312" y="0"><name x="-352" y="-8">idle</name><label kind="invariant" x="-360" y="24">global_time &lt;= 
nextLJobStartTime()
&amp;&amp; cost'==1</label></location><init ref="id12"/><transition><source ref="id12"/><target ref="id14"/><label kind="guard" x="-312" y="22">global_time &lt;= checkForMissedJob()</label></transition><transition><source ref="id12"/><target ref="id14"/><label kind="guard" x="-432" y="112">global_time &gt; checkForMissedJob()</label><label kind="assignment" x="-336" y="136">L1jobsskip++</label><nail x="-312" y="104"/></transition><transition><source ref="id13"/><target ref="id12"/><label kind="guard" x="-168" y="48">global_time &gt;= nextLJobEndTime()</label><label kind="synchronisation" x="-168" y="63">Ldone!</label><label kind="assignment" x="-168" y="78">L1jobsdone++</label><nail x="-56" y="104"/></transition><transition><source ref="id14"/><target ref="id13"/><label kind="guard" x="-280" y="-32">global_time &gt;= nextLJobStartTime()</label><label kind="synchronisation" x="-280" y="-48">Linit!</label></transition><transition><source ref="id14"/><target ref="id14"/><label kind="guard" x="-312" y="-112">global_time &gt;= nextLJobStartTime()</label><label kind="assignment" x="-312" y="-96">L1jobsskip++</label><nail x="-152" y="-80"/><nail x="-312" y="-80"/></transition></template><template><name>Insolation</name><declaration>int battery = 80;

int nextInsolationStartTime(){
	return Sunstarts[passed_solations];
}

int nextInsolationEndTime(){
	return Sunstarts[passed_solations] + Sundurations[passed_solations];
}</declaration><location id="id15" x="-376" y="24"><name x="-400" y="-8">Eclipse</name><label kind="invariant" x="-432" y="40">global_time &lt;= 
nextInsolationEndTime()</label></location><location id="id16" x="-648" y="24"><name x="-688" y="0">Sun</name><label kind="invariant" x="-760" y="32">global_time &lt;=
 nextInsolationStartTime()</label></location><init ref="id16"/><transition><source ref="id15"/><target ref="id16"/><label kind="guard" x="-640" y="88">global_time &gt;= 
nextInsolationEndTime()</label><label kind="assignment" x="-640" y="120">passed_solations++</label><nail x="-376" y="88"/><nail x="-648" y="88"/></transition><transition><source ref="id16"/><target ref="id15"/><label kind="guard" x="-608" y="-16">global_time &gt;= 
nextInsolationStartTime()</label></transition></template><template><name>Ender</name><declaration>int stop_time = END - (preheat_time + slew_time + 1);</declaration><location id="id17" x="-352" y="-72"><name x="-362" y="-102">go_to_deadlock</name><committed/></location><location id="id18" x="-592" y="-72"><name x="-602" y="-102">active</name><label kind="invariant" x="-602" y="-57">global_time &lt;= stop_time</label></location><init ref="id18"/><transition><source ref="id18"/><target ref="id17"/><label kind="guard" x="-552" y="-88">global_time &gt;= stop_time</label></transition></template><template><name>Battery</name><location id="id19" x="-64" y="-128"><name x="-74" y="-158">Depletion</name><committed/></location><location id="id20" x="-64" y="-64"><name x="-64" y="-96">check</name><committed/></location><location id="id21" x="-240" y="-64"><name x="-232" y="-88">Idle</name></location><location id="id22" x="-240" y="-128"><name x="-250" y="-158">Init</name><committed/></location><init ref="id22"/><transition><source ref="id20"/><target ref="id19"/><label kind="guard" x="-16" y="-64">l &lt; lb</label></transition><transition><source ref="id20"/><target ref="id21"/><label kind="guard" x="-176" y="-8">l &gt; lb</label><nail x="-64" y="-8"/><nail x="-240" y="-8"/></transition><transition><source ref="id21"/><target ref="id20"/><label kind="synchronisation" x="-208" y="-64">battery?</label><label kind="assignment" x="-208" y="-48">BatteryUpdate(10)</label></transition><transition><source ref="id22"/><target ref="id21"/></transition></template><template><name>X2Scheduler</name><declaration>
int X2jobsdone = 0;
int X2jobsskip = 0;


int checkForMissedJob(){
	return X2jobstarts[X2jobsdone + X2jobsskip] - slew_time;
}

int nextXJobStartTime(){
	return X2jobstarts[X2jobsdone + X2jobsskip] - slew_time;
}

int nextXJobEndTime(){
	return X2jobstarts[X2jobsdone + X2jobsskip] + X2jobdurations[X2jobsdone + X2jobsskip];
}
</declaration><location id="id23" x="-560" y="64"><urgent/></location><location id="id24" x="-440" y="-40"><name x="-416" y="-64">working</name><label kind="invariant" x="-424" y="-48">global_time &lt;=
nextXJobEndTime()</label></location><location id="id25" x="-728" y="-40"><name x="-768" y="-56">idle</name><label kind="invariant" x="-840" y="-32">global_time &lt;=
nextXJobStartTime()
&amp;&amp; cost'==4</label></location><init ref="id23"/><transition><source ref="id23"/><target ref="id25"/><label kind="guard" x="-704" y="-18">global_time &lt;=
checkForMissedJob()</label></transition><transition><source ref="id23"/><target ref="id25"/><label kind="guard" x="-728" y="70">global_time &gt;
checkForMissedJob()</label><label kind="assignment" x="-728" y="100">X2jobsskip++</label><nail x="-728" y="64"/></transition><transition><source ref="id24"/><target ref="id23"/><label kind="guard" x="-544" y="17">global_time &gt;=nextXJobEndTime()</label><label kind="synchronisation" x="-544" y="32">Xdone!</label><label kind="assignment" x="-544" y="47">++X2jobsdone</label><nail x="-440" y="64"/></transition><transition><source ref="id25"/><target ref="id25"/><label kind="guard" x="-728" y="-128">global_time &gt;=nextXJobStartTime()</label><label kind="assignment" x="-728" y="-112">X2jobsskip++</label><nail x="-728" y="-96"/><nail x="-528" y="-96"/></transition><transition><source ref="id25"/><target ref="id24"/><label kind="guard" x="-696" y="-70">global_time &gt;=nextXJobStartTime()</label><label kind="synchronisation" x="-696" y="-55">Xinit!</label></transition></template><template><name>L2Scheduler</name><declaration>
int L2jobsdone = 0;
/*int L2jobsActive = 0;*/
int L2jobsskip = 0;


int checkForMissedJob(){
	return L2jobstarts[L2jobsdone + L2jobsskip/* + L2jobsActive*/] - slew_time - preheat_time;
}

int nextLJobStartTime(){
	return L2jobstarts[L2jobsdone + L2jobsskip/*  + L2jobsActive*/] - slew_time - preheat_time;
}

int nextLJobEndTime(){
	return L2jobstarts[L2jobsdone + L2jobsskip] + L2jobdurations[L2jobsdone + L2jobsskip];
}</declaration><location id="id26" x="-80" y="128"><urgent/></location><location id="id27" x="96" y="8"><name x="120" y="-8">active</name><label kind="invariant" x="120" y="8">global_time &lt;= 
nextLJobEndTime()</label></location><location id="id28" x="-232" y="8"><name x="-272" y="-16">idle</name><label kind="invariant" x="-336" y="16">global_time &lt;=
 nextLJobStartTime()
&amp;&amp; cost'==1</label></location><init ref="id26"/><transition><source ref="id26"/><target ref="id28"/><label kind="guard" x="-200" y="48">global_time &lt;= 
checkForMissedJob()</label></transition><transition><source ref="id26"/><target ref="id28"/><label kind="guard" x="-232" y="136">global_time &gt; checkForMissedJob()</label><label kind="assignment" x="-232" y="152">L2jobsskip++</label><nail x="-232" y="128"/></transition><transition><source ref="id27"/><target ref="id26"/><label kind="guard" x="-48" y="56">global_time &gt;=
nextLJobEndTime()</label><label kind="synchronisation" x="-48" y="88">Ldone!</label><label kind="assignment" x="-48" y="103">L2jobsdone++</label><nail x="96" y="128"/></transition><transition><source ref="id28"/><target ref="id27"/><label kind="guard" x="-152" y="-24">global_time &gt;= nextLJobStartTime()</label><label kind="synchronisation" x="-152" y="-8">Linit!</label></transition><transition><source ref="id28"/><target ref="id28"/><label kind="guard" x="-232" y="-96">global_time &gt;= nextLJobStartTime()</label><label kind="assignment" x="-232" y="-80">L2jobsskip++</label><nail x="-136" y="-56"/><nail x="-232" y="-56"/></transition></template><system>// Place template instantiations here.
Att = Attitude();
X1S = X1Scheduler();
X2S = X2Scheduler();
L1S = L1Scheduler();
L2S = L2Scheduler();
UHFS = UHFScheduler();
BAT = Battery();
ENDER = Ender();

// List one or more processes to be composed into a system.
system Att, X1S, X2S, L1S, L2S, UHFS, BAT, ENDER;</system></nta>